
# vi:syntax=make

include Makefile

# 1. Directories

OBJDIR_WASM := $(OBJDIR)/wasm
DEPDIR_WASM := $(DEPDIR)/wasm
GENDIR_WASM := $(GENDIR)/wasm

# 2. Files

DSEKAI_C_FILES_WASM_ONLY := \
   src/main.c \
   unilayer/src/input/sdli.c \
   unilayer/src/graphics/sdlg.c \
   unilayer/src/memory/fakem.c

DSEKAI_O_FILES_WASM := \
   $(addprefix $(OBJDIR_WASM)/,$(subst .c,.o,$(DSEKAI_C_FILES))) \
   $(addprefix $(OBJDIR_WASM)/,$(subst .c,.o,$(DSEKAI_C_FILES_WASM_ONLY))) \
   $(addprefix $(OBJDIR_WASM)/,$(subst .c,.o,$(DSEKAI_C_FILES_RES)))

RESEXT_H := $(GENDIR_WASM)/resext.h

# 3. Programs

CC_WASM := emcc
LD_WASM := emcc

# 4. Arguments

DEFINES_WASM := \
   $(DEFINES_DSEKAI) \
   $(DEFINES_DEPTH) \
   $(DEFINES_RESOURCE) \
   -DPLATFORM_SDL \
   -DPLATFORM_WASM \
   -DUSE_SOFTWARE_TEXT \
   -DSCREEN_W=160 \
   -DSCREEN_H=160 \
   -DSCREEN_SCALE=$(SCREEN_SCALE)

INCLUDES_WASM := \
   -I unilayer/src \
   -I $(GENDIR_WASM)

CFLAGS_WASM := $(CFLAGS_GCC_GENERIC) $(DEFINES_WASM) $(INCLUDES_WASM) -s USE_SDL=2

LDFLAGS_WASM := $(LDFLAGS_GCC_GENERIC) -s USE_SDL=2

ifneq ($(BUILD),RELEASE)
   LDFLAGS_WASM += -s ASSERTIONS=1
endif

# 5. Targets

platform := wasm
res_gfx := $(DSEKAI_ASSETS_BITMAPS)
res_maps := $(DSEKAI_ASSETS_MAPS_JSON)
$(eval $(RESEXT_H_RULE))

pkg_bin := $(BIN_WASM)
pkg_strip := echo
pkg_name := $(DSEKAI)-$(platform)-$(GIT_HASH)
pkg_reqs := \
   $(BINDIR)/$(DSEKAI).wasm \
   $(BINDIR)/$(DSEKAI).js
$(eval $(PKG_RULE))

$(BIN_WASM) $(BINDIR)/$(DSEKAI).wasm $(BINDIR)/$(DSEKAI).js: \
$(DSEKAI_O_FILES_WASM) | $(BINDIR)/$(STAMPFILE)
	$(LD_WASM) -o $(BIN_WASM) $^ $(LDFLAGS_WASM)


$(OBJDIR_WASM)/%.o: %.c $(RESEXT_H) | $(DSEKAI_ASSETS_MAPS_JSON)
	$(MD) $(dir $@)
	$(CC_WASM) $(CFLAGS_WASM) -c -o $@ $(<:%.o=%)

#$(DEPDIR_WASM)/%.d: %.c $(RESEXT_H)
#	$(MD) $(dir $@)
#	$(CC_WASM) $(CFLAGS_WASM) -MM $< \
#      -MT $(subst .c,.o,$(addprefix $(DEPDIR_WASM)/,$<)) -MF $@
#
#include $(subst $(OBJDIR)/,$(DEPDIR)/,$(DSEKAI_O_FILES_WASM:.o=.d))

