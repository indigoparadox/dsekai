
# vi:syntax=make

ifneq ($(CALLER),MASTER)
   include Makefile.inc
endif

# 1. Directories

OBJDIR_WIN386 := $(OBJDIR)/win386
DEPDIR_WIN386 := $(DEPDIR)/win386
GENDIR_WIN386 := $(GENDIR)/win386

# 2. Files

BIN_WIN386 := $(BINDIR)/$(DSEKAI)le.exe

DSEKAI_C_FILES_WIN386_ONLY := \
   src/main.c \
   src/pov.c \
   unilayer/src/animate.c \
   unilayer/src/input/wini.c \
   unilayer/src/memory/fakem.c \
   unilayer/src/graphics/wing.c \
   unilayer/src/save/file.c

ifeq ($(RESOURCE),DEFAULT)
   DSEKAI_C_FILES_WIN386_ONLY += unilayer/src/resource/winr.c
else
   DSEKAI_C_FILES_WIN386_ONLY += $(DSEKAI_C_FILES_RES)
endif

DSEKAI_O_FILES_WIN386 := \
   $(addprefix $(OBJDIR_WIN386)/,$(subst .c,.o,$(DSEKAI_C_FILES))) \
   $(addprefix $(OBJDIR_WIN386)/,$(subst .c,.o,$(DSEKAI_C_FILES_WIN386_ONLY)))

WIN386_RES_FILES := src/winstat.rc
ifeq ($(RESOURCE),DEFAULT)
   WIN386_RES_FILES += $(GENDIR_WIN386)/win.rc
endif
#WIN386_RES_FILES += $(ASSETDIR)/$(DSEKAI).ico

# 1a. Packaging Manifest

WIN386_MANIFEST :=

ifeq ($(RESOURCE),FILE)
   WIN386_MANIFEST += $(DSEKAI_ASSETS_BITMAPS)
endif

ifeq ($(FMT_ASN),TRUE)
   WIN386_MANIFEST += $(subst .json,.asn,$(DSEKAI_ASSETS_MAPS_JSON))
endif

ifeq ($(FMT_JSON),TRUE)
   WIN386_MANIFEST += \
      $(DSEKAI_ASSETS_MAPS_JSON) \
      $(DSEKAI_ASSETS_TILESETS_JSON)
endif

RESEXT_H_WIN386 := $(GENDIR_WIN386)/resext.h

# 3. Programs

CC_WIN386 := wcc386
LD_WIN386 := wcl386
RC_WIN386 := wrc

# 4. Arguments

DEFINES_WIN386 := \
   $(DEFINES_DSEKAI) \
   $(DEFINES_DEPTH) \
   -DPLATFORM_WIN16 \
   -DMEMORY_FAKE

INCLUDES_WIN386 := \
   $(subst -I ,-i=,$(INCLUDES_UNILAYER)) \
   -i=$(GENDIR_WIN386) \
   -i=$(INCLUDE)/win

CFLAGS_WIN386 := -bt=windows -bw $(CFLAGS_OWC_GENERIC) $(DEFINES_WIN386) $(INCLUDES_WIN386)

LDFLAGS_WIN386 := -l=win386 $(LDFLAGS_OWC_GENERIC)

RCFLAGS_WIN386 := $(DEFINES_WIN386) -i=$(INCLUDE)win

ifneq ($(BUILD),RELEASE)
   # Debug build.
   CFLAGS_WIN386 += -DLOG_TO_FILE
   LDFLAGS_WIN386 += -en -d3
endif

ifneq ($(RESOURCE),DEFAULT)
   CFLAGS_WIN386 += $(subst -I ,-I=,$(DEFINES_RESOURCE))
endif

ifeq ($(RESOURCE),DEFAULT)
   RCFLAGS_WIN386 += -DRESOURCE_WIN
endif

# 5. Targets

platform := win386
platform_upper := WIN386
res_gfx := $(DSEKAI_ASSETS_BITMAPS)
$(eval $(RESEXT_H_RULE))

pkg_bin := $(BIN_WIN386)
pkg_strip := echo
pkg_name := $(DSEKAI)-$(platform)-$(GIT_HASH)
pkg_reqs := $(WIN386_MANIFEST)
$(eval $(PKG_RULE))

$(BINDIR)/$(DSEKAI)le.img: $(BIN_WIN386)
	$(DD) if=/dev/zero bs=512 count=2880 of="$@"
	$(MKFSVFAT) "$@"
	$(MCOPY) -i "$@" $< ::$(DSEKAI)le.exe

$(OBJDIR_WIN386)/$(DSEKAI)le.rex: \
$(DSEKAI_O_FILES_WIN386) | $(OBJDIR_WIN386)/$(STAMPFILE)
	$(LD_WIN386) $(LDFLAGS_WIN386) -fe=$@ $^

$(BIN_WIN386): $(OBJDIR_WIN386)/$(DSEKAI)le.rex | $(BINDIR)/$(STAMPFILE)
	wbind $< -s $(WATCOM)/binw/win386.ext -R $(WIN386_RES_FILES) $(RCFLAGS_WIN386) $(OBJDIR_WIN386)/$(DSEKAI)le.exe
	mv -v $(OBJDIR_WIN386)/$(DSEKAI)le.exe $(BIN_WIN386)

$(OBJDIR_WIN386)/%.o: %.c $(RESEXT_H_WIN386)
	$(MD) $(dir $@)
	$(CC_WIN386) $(CFLAGS_WIN386) -fo=$@ $(<:%.c=%)

#$(DEPDIR_WIN386)/%.d: %.c $(RESEXT_H_WIN386)
#	$(MD) $(dir $@)
#	$(HOST_CC) $(subst -i=,-I ,$(INCLUDES_WIN386)) $(DEFINES_WIN386) -MM $< \
#      -MT $(subst .c,.o,$(addprefix $(DEPDIR_WIN32)/,$<)) -MF $@

#include $(subst $(OBJDIR)/,$(DEPDIR)/,$(DSEKAI_O_FILES_WIN386:.o=.d))

